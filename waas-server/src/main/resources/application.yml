logging:
  level:
    org.springframework.web: INFO
    com.github.binarywang.demo.wx.mp: DEBUG
    me.chanjar.weixin: DEBUG

spring:
  data:
    redis:
      host: ${WAAS_REDIS_HOST}
      port: ${WAAS_REDIS_PORT}
      password: ${WAAS_REDIS_PASSWORD}

  main:
    web-application-type: none
    banner-mode: off
  ai:
    mcp:
      server:
        name: my-weather-server
        version: 0.0.1
    # 配置mcp nacos
    alibaba:
      mcp:
        nacos:
          server-addr: ${BSIN_NACOS_SERVER_ADDR} # Nacos 服务器地址
          username: ${BSIN_NACOS_USERNAME}
          password: ${BSIN_NACOS_PASSWORD}
          registry:
            enabled: true
            service-group: waas-server
            service-name: waas-mcp-server

shenyu:
  register:
    registerType: http #zookeeper #etcd #nacos #consul
    serverLists: ${BSIN_SHENYU_REGISTER_SERVERLISTS} #localhost:2181 #http://localhost:2379 #localhost:8848
    props:
      username: ${BSIN_SHENYU_REGISTER_PROPS_USERNAME}
      password: ${BSIN_SHENYU_REGISTER_PROPS_PASSWORD}
  client:
    dubbo:
      props:
        contextPath: /waas
        appName: waas
    http:
      props:
        port: 91070
        contextPath: /callback
        appName: callback

dubbo:
  application:
    name: ${spring.application.name}
    # 注册行为：应用级别  可选值 interface、instance、all
    register-mode: interface
    qos-enable: false
  registry:
    address: ${BSIN_DOUBBO_REGISTRY_ADDRESS}
    username: ${BSIN_DOUBBO_REGISTRY_USERNAME}
    password: ${BSIN_DOUBBO_REGISTRY_PASSWORD}
  protocol:
    name: dubbo
    port: -1
  scan:
    base-packages: me.flyray.bsin.server.impl
  provider:
    validation: true
    version: dev
  consumer:
    check: false
    version: dev

wx:
  mp:
    useRedis: false
    redisConfig:
      host: ${WAAS_REDIS_HOST}
      port: ${WAAS_REDIS_PORT}
      password: ${WAAS_REDIS_PASSWORD}
    configs:
      - appId: 11 # 第一个公众号的appid
        secret: 11 # 公众号的appsecret
        token: 11 # 接口配置里的Token值
        aesKey: 11 # 接口配置里的EncodingAESKey值
      - appId: 2222 # 第二个公众号的appid，以下同上
        secret: 1111
        token: 111
        aesKey: 111

rocketmq:
  consumer:
    access-key: rocketmq2
    secret-key: 12345678
    group: consumer_group
    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值 172.28.0.3:10911
    pull-batch-size: 10
    topic: waas-test
  name-server: 172.24.0.2:9876
  producer:
    access-key: rocketmq2
    secret-key: 12345678
    # 发送同一类消息的设置为同一个group，保证唯一
    group: springboot_producer_group
    # 发送消息超时时间，默认3000
    sendMessageTimeout: 10000
    # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    # 异步消息重试此处，默认2
    retryTimesWhenSendAsyncFailed: 2
    # 消息最大长度，默认1024 * 1024 * 4(默认4M)
    maxMessageSize: 4096
    # 压缩消息阈值，默认4k(1024 * 4)
    compressMessageBodyThreshold: 4096
    # 是否在内部发送失败时重试另一个broker，默认false
    retryNextServer: false

bsin:
  security:
    authentication-secretKey: shenyu-test-shenyu-test-shenyu-test
    # 过期时间，单位分钟
    authentication-expiration: 60
  app-chain:
    gateway-url: http://127.0.0.1:8125
    eth:
      chain-listen-url-http: https://go.getblock.io/f0f38083726a43a5829e27db2ba6fcaa
      chain-listen-url-wss: wss://go.getblock.io/bd80241fdd3348278f38706105a8b003
    bsc:
      chain-listen-url-http: https://go.getblock.io/7f69a828c68743dc84d3fc44eb77b837
      chain-listen-url-wss: wss://go.getblock.io/466b806dd386446c8c4dcf8e6aa62b78
    get-gas:
      address: '0x5d90A41098954fd90eb70805b3E9442AF9E91625'  # 资金归结gas fee账号
      amount: 1000
  oms:
    aesKey: 11
